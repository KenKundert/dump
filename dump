#!/usr/bin/env python3
"""Backup files to a remote server

Usage:
    dump [options] backup [full | incremental]
    dump [options] manifest
    dump [options] restore <filelist>...
    dump [options] verify
    dump [options] cleanup
    dump help [<topic>]

Options:
    -d <date>, --date <date>  date or time interval
    -n, --narrate             send dump and duplicity narration to stdout
    -t, --trial-run           trial run
    -v, --verbose             causes duplicity to be more verbose

If needed, date is given in one of the following forms:
1. now (current time - the default)
2. 3D12h (interval constructed using s, m, h, D, W, M, or Y)
3. YYYY/MM/DD, YYYY-MM-DD, MM/DD/YYYY, or MM-DD-YYYY (date)

{topics}
"""

# Imports {{{1
from docopt import docopt
from inform import display, fatal, full_stop, Inform, narrate
from scripts import (
    abspath, cwd, fopen, exists, head, isexecutable, join, mkdir, rm, Run,
    script_prefs, ScriptError, sh, split, tail
)
from textwrap import dedent
import socket
import getpass
import sys
import os

# Settings {{{1
NAME = 'ken'                                    # descriptive name for the backups
ABRAXAS_GPG_ACCOUNT = 'duplicity-kundert'       # abraxas account that holds passphrase for encryption key
GPG_PASSPHRASE = None                           # passphrase for encryption key; if specified, abraxas is not used
SSH_IDENTITY = "~/.ssh/dumper"                  # ssh identify file (contains private key without passphrase)
DEST_SERVER = "dumper"                          # remote host, or remote user and host (user@server)
DEST_DIR = "/mnt/mnt1/{hostname}/{hostname}"    # remote directory for backup sets
SRC_DIR = "~"                                   # absolute path to directory to be backed up
ARCHIVE_DIR = "archives"                        # directory of duplicity housekeeping files
RESTORE_DIR = 'restored'                        # directory that will hold restored files
LOG_FILE = 'duplicity.log'                      # log file
EXCLUDES = [                                    # list of glob strings of files or directories to skip
    "~/tmp",
    "~/media",
    "~/packages",
    "~/.downloads",
    "~/.local",
    "~/.mozilla",
    "~/.thunderbird",
    "~/.npm",
    "~/.wine",
    "~/.wine-x86_64",
    "~/.adobe",
    "~/.cache",
    "~/.config/mutt/cache",
    "~/.config/gconf",
    "~/.config/google-chrome*",
    "~/.config/pulse",
    "~/.config/Skype",
    "~/.dbus",
    "~/.gimp-*",
    "~/.gnome",
    "~/.gnome2",
    "~/.jitsi",
    "~/.purple",
    "~/.thumbnails",
    "~/.config/libreoffice",
    "~/.config/fish/generated_completions",
    "~/.local",
    "~/**/.hg",
    "~/**/.git",
    "~/**/tags",
    "~/**/*.pyc",
    "~/**/.*.swp",
    "{installDir}/{ARCHIVE_DIR}",
    "{installDir}/{LOG_FILE}",
]

# commands to be run before and after backups
RUN_BEFORE_BACKUP = [
    "./clean-home >& clean.log",
        # remove the detritus before backing up
]
RUN_AFTER_BACKUP = [
    "./since-last-backup -u",
        # update the time of last successful backup in ~/.lastbackup
]

# if set, this file must exist or backups will quit with an error
MUST_EXIST = "$HOME/src/verif/av"

BW_LIMIT = '2000'                                # bandwidth limit in kb/s
NOTIFY = "admin@shalmirane.com"                  # email address to notify when things go wrong
NOTIFIER = 'notify-send -u normal Dump "{msg}"'  # notifier program
LOCK_FILE = "{SRC_DIR}/.backups-are-running"     # lock file, used to tell if dump is already running
SSH_BACKEND_METHOD = 'protocol'                  # use 'option' for Duplicity version 0.6.25 and lower
                                                 # use 'protocol' for Duplicity version 0.7.05 and above

# Help Topics {{{1
HELP_TOPICS = {
    'intro': dedent('''
        Dump is a simple command line utility to orchestrate backups. It is 
        built on Duplicity, which is a powerful and flexible utility for 
        managing encrypted backups, however it has a rather heavy user 
        interface. With dump, you specify all the details about your backups 
        once in advance, and then use a very simple command line interface for 
        your day-to-day activities.

        Dump is a relatively small python script that designed to be modified to 
        customize it for a particular backup. If you wish multiple backups, you 
        simply copy the dump script and modify each copy for a particular 
        backup.

        Generally, you should dedicate a directory to your backups. That 
        directory will hold the dump executable and the archive directory. The 
        archive directory contains Duplicity housekeeping files for the backup. 
        You can place as many of the dump executables as you wish in that 
        directory and they can be configured to share the archive directory.
    '''),
    'backup': dedent('''
        Once configured, you would perform your first backup as a full backup:

            ./dump backup full

        After than, you should prefer incremental backups, which you run using:

            ./dump backup
    '''),
    'manifest': dedent('''
        Once a backup has been performed, you can list the files available in 
        your backup using:

            ./dump manifest

        You can list the files that existed on a particular date using:

            ./dump --date 2015-04-01 manifest

        Or, you can list the files that existed 3.5 days ago using:

            ./dump --date 3D12h manifest

        The interval string passed as the date is constructed using an integer 
        followed by one of the following characters s (seconds), m (minutes), 
        h (hours), D (days), W (weeks), M (months), or Y (years). You can 
        combine several to get more resolution.
    '''),
    'restore': dedent('''
        You restore a file or directory using:

            ./dump restore src/verif/av/manpages/settings.py

        Use manifest to determine what path you should specify to identify the 
        desired file or directory.

        You can restore the version of a file that existed on a particular date 
        using:

            ./dump --date 2015-04-01 restore src/verif/av/manpages/settings.py

        Or, you can restore the version that existed 6 months ago using:

            ./dump --date 6M restore src/verif/av/manpages/settings.py

        Your restored files will be found in {RESTORE_DIR}.
    '''),
    'cleanup': dedent('''

        You can clean up your remote repository using:

            ./dump cleanup

        This removes any unneeded files Duplicity created files in the remote 
        repository.  This is not normally necessary, however it can be helpful 
        if a previous session terminated abnormally.

        If you also give a date, any backup sets that only contain files that 
        are older than the given date are deleted:

            ./dump -d 1Y cleanup

        This can reduce the size of your remote repository. Of course after 
        doing this you may not be able to restore files that were deleted before 
        the date you specified.
    '''),
    'trouble': dedent('''
        If Duplicity is refusing to work for you, run using the verbose flags:

            ./dump -v -n backup full

        Then carefully read the error messages. They should lead you to the 
        problem.
    '''),
    'precautions': dedent('''
        You should assure you have a backup copy of the GPG passphrase in a safe 
        place.  This is very important. If the only copy of the GPG passphrase 
        is on the disk being backed up, then if that disk were to fail you would 
        not be able to access your backups.

        If you keep the GPG passphrase in the dump file, you should set its 
        permissions so that it is not readable by others:

            chmod 700 dump

        Better yet is to simply not store the passphrase in the dump script. 
        This can be arranged if you are using `Abraxas 
        <https://github.com/KenKundert/abraxas>`_, which is a flexible password 
        management system. The interface to Abraxas is already built in to dump, 
        but its use is optional (it need not be installed).

        It is also best, if it can be arranged, to keep your backups at a remote 
        site so that your backups do not get destroyed in the same disaster, 
        such as a fire or flood, that claims your original files. If you do not 
        have, or do not wish to use, your own server, Duplicity offers a number 
        of backends that allow you to place your backups in the cloud 
        (Rackspace, Dropbox, Amazon, Google, etc.).  Remember, your data is 
        fully encrypted, so they cannot pry.
    '''),
}

# Utility functions -- should not need to change anything below line {{{1
# Configure expand() so it expands ~, $var, and {attr} as expected
script_prefs(exit_upon_error=False, expanduser=True, expandvars=True)
hostname = socket.gethostname().split('.')[0]
user = getpass.getuser()
sshIdentity = join(SSH_IDENTITY) if SSH_IDENTITY else None
installDir = abspath(head(__file__))
variables = locals()

# expand {attr} constructs in a string recursively, then expand ~ and $VAR
def expand(name):
    new = name.format(**variables)
    if new == name:
        return join(new) # join() is used to expand ~ and $VAR
    else:
        return expand(new)

# expand ~, $var, and {attr} constructs in a list of strings
def expandAll(names):
    return [expand(each) for each in names if each]

# take a list and double its length by adding a constant before each member
def prefix(constant, members):
    for member in members:
        yield constant
        yield member

# handle errors
def fail(msg):
    msg = full_stop(msg)
    if NOTIFY:
        sh(['mail', '-s "dump: %s"' % msg, NOTIFY],
            stdin=dedent('''
                source = {hostname}:{SRC_DIR}
                destination = {DEST_SERVER}:{DEST_DIR}
            '''.format(**variables))
        )
    if NOTIFIER:
        sh(NOTIFIER.format(msg=msg))
    fatal(msg)

# runDuplicity() {{{1
def runDuplicity(name, cmd, narrating):
    try:
        narrate('starting duplicity')
        duplicity = Run(cmd, 's%sW' % ('oe' if narrating else 'OE'))
    except ScriptError as exception:
        fail('%s failed: %s' % (name, str(exception)))

# backup() {{{1
def backup(level):
    if exists(lockfile):
        fail("backups skipped because a previous run has not yet completed")
    if MUST_EXIST and not exists(expand(MUST_EXIST)):
        fail(
            "%s: does not exist, perform proper setup and restart" % MUST_EXIST
        )
    try:
        for each in RUN_BEFORE_BACKUP:
            narrate('running', each)
            sh(expand(each))
        if lockfile:
            with fopen(lockfile, 'w') as f:
                print('PID = %s, wd = %s' % (pid, cwd()), file=f)
        cmd = (
            [   'duplicity',
                level,
                '--timeout', '1800',
                '--allow-source-mismatch',
            ]
          + expandAll(duplicityOptions)
          + expandAll(archiveDirCommand)
          + expandAll(sftpCommand)
          + list(prefix('--exclude', expandAll(EXCLUDES)))
          + [srcDir, destination]
        )
        runDuplicity('backup', cmd, narrating)
        for each in RUN_AFTER_BACKUP:
            narrate('running', each)
            sh(expand(each))
    except KeyboardInterrupt:
        fail('killed at user request')
    finally:
        if lockfile:
            rm(lockfile)

# restore() {{{1
def restore(filelist, date):
    date = ['--time', date] if date else []
    mkdir(join(restoreDir))
    for each in filelist:
        narrate('restoring %s.' % each)
        dest = join(restoreDir, tail(each))
        cmd = (
            [   'duplicity',
                'restore',
                '--file-to-restore', each,
                '--timeout', '120',
            ]
          + expandAll(duplicityOptions)
          + expandAll(archiveDirCommand)
          + expandAll(sftpCommand)
          + date
          + [destination, dest]
        )
        runDuplicity('restore', cmd, narrating)
        display("%s: restored as: %s" % (each, dest))

# manifest() {{{1
def manifest(date):
    date = ['--time', date] if date else []
    cmd = (
        [   'duplicity',
            'list-current-files',
            '--timeout', '600',
        ]
      + expandAll(duplicityOptions)
      + expandAll(archiveDirCommand)
      + expandAll(sftpCommand)
      + date
      + [destination]
    )
    runDuplicity('manifest', cmd, True)

# verify() {{{1
def verify(date):
    date = ['--time', date] if date else []
    cmd = (
        [   'duplicity',
            'verify',
            '--timeout', '600',
        ]
      + expandAll(duplicityOptions)
      + expandAll(archiveDirCommand)
      + expandAll(sftpCommand)
      + date
      + [destination, srcDir]
    )
    runDuplicity('verify', cmd, True)

# cleanup() {{{1
def cleanup(date):
    # first remove any extraneous files from failed sessions
    cmd = (
        [   'duplicity',
            'cleanup',
            '--force',
            '--timeout', '120',
        ]
      + expandAll(duplicityOptions)
      + expandAll(archiveDirCommand)
      + expandAll(sftpCommand)
      + [destination]
    )
    runDuplicity('cleanup', cmd, narrating)

    # now remove backup sets that only contain old files
    if date:
        cmd = (
            [   'duplicity',
                'remove-older-than', date,
                '--force',
                '--timeout', '120',
            ]
          + expandAll(duplicityOptions)
          + expandAll(archiveDirCommand)
          + expandAll(sftpCommand)
          + [destination]
        )
        runDuplicity('remove', cmd, narrating)

# help() {{{1
def help(topic):
    text = HELP_TOPICS.get(topic)
    if text is None:
        if topic:
            display('%s: unknown topic.\n' % topic)
        display(help_topics())
    else:
        display(text.format(**globals()))

def help_topics():
    indent = '    '
    lines = ['Help topics include:'] + [
        indent + t for t in sorted(HELP_TOPICS.keys())
    ]
    return '\n'.join(lines)

# Setup {{{1
# Color messages {{{2
try:
    from inform import Color
    fail = Color('red', Color.isTTY(sys.stdout))
except ImportError:
    fail = lambda a: a

# Process the settings {{{2
try:
    destDir = expand(DEST_DIR)
    srcDir = expand(SRC_DIR)
    archiveDir = expand(ARCHIVE_DIR)
    restoreDir = expand(RESTORE_DIR)
    logFile = expand(LOG_FILE)
    lockfile = expand(LOCK_FILE) if LOCK_FILE else None
    pid = os.getpid()

    # Duplicity and SSH options {{{2
    logFileArg = ['--log-file', logFile] if logFile else []
    bwLimitArg = '-l %s' % BW_LIMIT if BW_LIMIT else ''
    sshIdentityArg = '-i %s' % sshIdentity if sshIdentity else ''
    duplicityOptions = logFileArg
    sftpCommand = ['--sftp-command', 'sftp {sshIdentityArg} {bwLimitArg}']
    name = NAME if NAME else '_'.join(split(join(SRC_DIR)))
    archiveDirCommand = ['--archive-dir', archiveDir, '--name', name]
    if SSH_BACKEND_METHOD == 'option':
        duplicityOptions += ['--ssh-backend', 'pexpect']
        protocol = 'sftp'
    else:
        assert SSH_BACKEND_METHOD == 'protocol'
        protocol = 'pexpect+sftp'
    destination = expand(protocol + '://{DEST_SERVER}/{destDir}')

    # Read command line {{{2
    cmdline = docopt(__doc__.format(topics=help_topics()))
    duplicityOptions += ['-v9'] if cmdline['--verbose'] else ['-v8']
    duplicityOptions += ['--dry-run'] if cmdline['--trial-run'] else []
    narrating = cmdline['--narrate']
    Inform(narrate=narrating, logfile=True)

    # Get GPG passphrase {{{2
    if not GPG_PASSPHRASE:
        try:
            from abraxas import PasswordGenerator
        except ImportError:
            fail(', '.join([
                'abraxas is not available',
                'you must specify passphrase in dump settings'
            ]))
        pw = PasswordGenerator()
        pw.read_accounts()
        acct = pw.get_account(ABRAXAS_GPG_ACCOUNT)
        GPG_PASSPHRASE = pw.generate_password()
    os.environ['PASSPHRASE'] = GPG_PASSPHRASE

    # Run commands {{{1
    if cmdline['backup']:
        backup('full' if cmdline['full'] else 'incremental')
    elif cmdline['restore']:
        restore(cmdline['<filelist>'], cmdline['--date'])
    elif cmdline['manifest']:
        manifest(cmdline['--date'])
    elif cmdline['verify']:
        verify(cmdline['--date'])
    elif cmdline['cleanup']:
        cleanup(cmdline['--date'])
    elif cmdline['help']:
        help(cmdline['<topic>'])
    sys.exit()

except ScriptError as exception:
    fail(str(exception))
except KeyboardInterrupt:
    fail('killed at user request')
