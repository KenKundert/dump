#!/usr/bin/env python3
"""Backup files to a remote server

Usage:
    dump [options] backup [full | incremental]
    dump [options] manifest
    dump [options] restore <filelist>...
    dump [options] verify
    dump [options] cleanup

Options:
    -d <date>, --date <date>  date or time interval
    -n, --narrate             send duplicity narration to stdout
    -t, --trial-run           trial run
    -v, --verbose             verbose

If needed, date is given in one of the following forms:
1. now (current time - the default)
2. 3D12h (interval constructed using s, m, h, D, W, M, or Y)
3. YYYY/MM/DD, YYYY-MM-DD, MM/DD/YYYY, or MM-DD-YYYY (date)
"""

# Imports {{{1
from scripts import (
    abspath, cwd, fopen, exists, head, isexecutable, join, mkdir, rm, Run,
    script_prefs, ScriptError, sh, split, tail
)
from docopt import docopt
from textwrap import dedent
import socket
import getpass
import sys
import os

# Settings {{{1
NAME = 'ken'                                    # descriptive name for the backups
ABRAXAS_GPG_ACCOUNT = 'duplicity-kundert'       # abraxas account that holds passphrase for encryption key
GPG_PASSPHRASE = None                           # passphrase for encryption key; if specified, abraxas is not used
SSH_IDENTITY = "~/.ssh/dumper"                  # ssh identify file (contains private key without passphrase)
DEST_SERVER = "dumper"                          # remote host, or remote user and host (user@server)
DEST_DIR = "/mnt/mnt1/{hostname}/{hostname}"    # remote directory for backup sets
SRC_DIR = "~"                                   # absolute path to directory to be backed up
ARCHIVE_DIR = "archives"                        # directory of duplicity housekeeping files
RESTORE_DIR = 'restored'                        # directory that will hold restored files
LOG_FILE = 'duplicity.log'                      # log file
EXCLUDES = [                                    # list of glob strings of files or directories to skip
    "~/tmp",
    "~/media",
    "~/effsim",
    "~/packages",
    "~/lib/locatedbs",
    "~/.downloads",
    "~/.local",
    "~/.mozilla",
    "~/.thunderbird",
    "~/.npm",
    "~/.wine",
    "~/.wine-x86_64",
    "~/.adobe",
    "~/.cache",
    "~/.config/mutt/cache",
    "~/.config/gconf",
    "~/.config/google-chrome*",
    "~/.config/pulse",
    "~/.config/Skype",
    "~/.dbus",
    "~/.gimp-*",
    "~/.gnome",
    "~/.gnome2",
    "~/.jitsi",
    "~/.purple",
    "~/.thumbnails",
    "~/.config/libreoffice",
    "~/.config/fish/generated_completions",
    "~/.local",
    "~/**/.hg",
    "~/**/.git",
    "~/**/tags",
    "~/**/*.pyc",
    "~/**/.*.swp",
    "{installDir}/{ARCHIVE_DIR}",
    "{installDir}/{LOG_FILE}",
]

# commands to be run before and after backups
RUN_BEFORE_BACKUP = [
    "./clean-home >& clean.log",
        # remove the detritus before backing up
]
RUN_AFTER_BACKUP = [
    "./since-last-backup -u",
        # update the time of last successful backup in ~/.lastbackup
]

# if set, this file must exist or backups will quit with an error
MUST_EXIST = "$HOME/src/verif/av"

BW_LIMIT = '2000'                                # bandwidth limit in kb/s
NOTIFY = "admin@shalmirane.com"                  # email address to notify when things go wrong
NOTIFIER = 'notify-send -u normal Dump "{msg}"'  # notifier program
LOCK_FILE = "{SRC_DIR}/.backups-are-running"     # lock file, used to tell if dump is already running
SSH_BACKEND_METHOD = 'option'                    # use 'option' for Duplicity version 0.6.25 and lower
                                                 # use 'protocol' for Duplicity version 0.7.05 and above

# Utility functions -- should not need to change anything below line {{{1
# Configure expand() so it expands ~, $var, and {attr} as expected
script_prefs(exit_upon_error=False, expanduser=True, expandvars=True)
hostname = socket.gethostname().split('.')[0]
user = getpass.getuser()
sshIdentity = join(SSH_IDENTITY) if SSH_IDENTITY else None
installDir = abspath(head(__file__))
variables = locals()

# expand {attr} constructs in a string recursively, then expand ~ and $VAR
def expand(name):
    new = name.format(**variables)
    if new == name:
        return join(new) # join() is used to expand ~ and $VAR
    else:
        return expand(new)

# expand ~, $var, and {attr} constructs in a list of strings
def expandAll(names):
    return [expand(each) for each in names if each]

# take a list and double its length by adding a constant before each member
def prefix(constant, members):
    for member in members:
        yield constant
        yield member

# handle errors
def error(msg):
    if NOTIFY:
        sh(['mail', '-s "dump: %s"' % msg, NOTIFY],
            stdin=dedent('''
                source = {hostname}:{SRC_DIR}
                destination = {DEST_SERVER}:{DEST_DIR}
            '''.format(**variables))
        )
    if NOTIFIER:
        sh(NOTIFIER.format(msg=msg))
    sys.exit(fail('dump: ' + msg))

# runDuplicity() {{{1
def runDuplicity(name, cmd, narrate):
    try:
        duplicity = Run(cmd, 's%sW' % ('oe' if narrate else 'OE'))
    except ScriptError as exception:
        print(str(exception))
        error('%s failed.' % name)

# backup() {{{1
def backup(level):
    if exists(lockfile):
        error("backups skipped because a previous run has not yet completed.")
    if MUST_EXIST and not exists(expand(MUST_EXIST)):
        error(
            "%s: does not exist, perform proper setup and restart." % MUST_EXIST
        )
    try:
        for each in RUN_BEFORE_BACKUP:
            sh(expand(each))
        if lockfile:
            with fopen(lockfile, 'w') as f:
                print('PID = %s, wd = %s' % (pid, cwd()), file=f)
        cmd = (
            [   'duplicity',
                level,
                '--timeout', '1800',
                '--allow-source-mismatch',
            ]
          + expandAll(duplicityOptions)
          + expandAll(archiveDirCommand)
          + expandAll(sftpCommand)
          + list(prefix('--exclude', expandAll(EXCLUDES)))
          + [srcDir, destination]
        )
        runDuplicity('backup', cmd, narrate)
        for each in RUN_AFTER_BACKUP:
            sh(expand(each))
    except KeyboardInterrupt:
        error('dump: killed at user request.')
    finally:
        if lockfile:
            rm(lockfile)

# restore() {{{1
def restore(filelist, date):
    date = ['--time', date] if date else []
    mkdir(join(restoreDir))
    for each in filelist:
        dest = join(restoreDir, tail(each))
        cmd = (
            [   'duplicity',
                'restore',
                '--file-to-restore', each,
                '--timeout', '120',
            ]
          + expandAll(duplicityOptions)
          + expandAll(archiveDirCommand)
          + expandAll(sftpCommand)
          + date
          + [destination, dest]
        )
        runDuplicity('restore', cmd, narrate)
        print("%s: restored as: %s" % (each, dest))

# manifest() {{{1
def manifest(date):
    date = ['--time', date] if date else []
    cmd = (
        [   'duplicity',
            'list-current-files',
            '--timeout', '600',
        ]
      + expandAll(duplicityOptions)
      + expandAll(archiveDirCommand)
      + expandAll(sftpCommand)
      + date
      + [destination]
    )
    runDuplicity('manifest', cmd, True)

# verify() {{{1
def verify(date):
    date = ['--time', date] if date else []
    cmd = (
        [   'duplicity',
            'verify',
            '--timeout', '600',
        ]
      + expandAll(duplicityOptions)
      + expandAll(archiveDirCommand)
      + expandAll(sftpCommand)
      + date
      + [destination, srcDir]
    )
    runDuplicity('verify', cmd, True)

# cleanup() {{{1
def cleanup(date):
    # first remove any extraneous files from failed sessions
    cmd = (
        [   'duplicity',
            'cleanup',
            '--force',
            '--timeout', '120',
        ]
      + expandAll(duplicityOptions)
      + expandAll(archiveDirCommand)
      + expandAll(sftpCommand)
      + [destination]
    )
    runDuplicity('cleanup', cmd, narrate)

    # now remove backup sets that only contain old files
    if date:
        cmd = (
            [   'duplicity',
                'remove-older-than', date,
                '--force',
                '--timeout', '120',
            ]
          + expandAll(duplicityOptions)
          + expandAll(archiveDirCommand)
          + expandAll(sftpCommand)
          + [destination]
        )
        runDuplicity('remove', cmd, narrate)

# Setup {{{1
# Color messages {{{2
try:
    from messenger import Color
    fail = Color('red', Color.isTTY(sys.stdout))
except ImportError:
    fail = lambda a: a

# Process the settings {{{2
try:
    destDir = expand(DEST_DIR)
    srcDir = expand(SRC_DIR)
    archiveDir = expand(ARCHIVE_DIR)
    restoreDir = expand(RESTORE_DIR)
    logFile = expand(LOG_FILE)
    lockfile = expand(LOCK_FILE) if LOCK_FILE else None
    pid = os.getpid()

    # Duplicity and SSH options {{{2
    logFileArg = ['--log-file', logFile] if logFile else []
    bwLimitArg = '-l %s' % BW_LIMIT if BW_LIMIT else ''
    sshIdentityArg = '-i %s' % sshIdentity if sshIdentity else ''
    duplicityOptions = logFileArg
    sftpCommand = ['--sftp-command', 'sftp {sshIdentityArg} {bwLimitArg}']
    name = NAME if NAME else '_'.join(split(join(SRC_DIR)))
    archiveDirCommand = ['--archive-dir', archiveDir, '--name', name]
    if SSH_BACKEND_METHOD == 'option':
        duplicityOptions += ['--ssh-backend', 'pexpect']
        protocol = 'sftp'
    else:
        assert SSH_BACKEND_METHOD == 'protocol'
        protocol = 'pexpect+sftp'
    destination = expand(protocol + '://{DEST_SERVER}/{destDir}')

    # Read command line {{{2
    cmdline = docopt(__doc__)
    duplicityOptions += ['-v9'] if cmdline['--verbose'] else ['-v8']
    duplicityOptions += ['--dry-run'] if cmdline['--trial-run'] else []
    narrate = cmdline['--narrate']

    # Get GPG passphrase {{{2
    if not GPG_PASSPHRASE:
        try:
            from abraxas import PasswordGenerator
        except ImportError:
            error(', '.join([
                'abraxas is not available',
                'you must specify passphrase in dump settings.'
            ]))
        pw = PasswordGenerator()
        pw.read_accounts()
        acct = pw.get_account(ABRAXAS_GPG_ACCOUNT)
        GPG_PASSPHRASE = pw.generate_password()
    os.environ['PASSPHRASE'] = GPG_PASSPHRASE

    # Run commands {{{1
    if cmdline['backup']:
        backup('full' if cmdline['full'] else 'incremental')
    elif cmdline['restore']:
        restore(cmdline['<filelist>'], cmdline['--date'])
    elif cmdline['manifest']:
        manifest(cmdline['--date'])
    elif cmdline['verify']:
        verify(cmdline['--date'])
    elif cmdline['cleanup']:
        cleanup(cmdline['--date'])
    sys.exit()

except ScriptError as exception:
    error(str(exception))
except KeyboardInterrupt:
    error('dump: killed at user request')
